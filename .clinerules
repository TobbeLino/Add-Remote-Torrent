# .clinerules for Remote Torrent WebUI Adder

## Project Intelligence & Learned Patterns

*(This file will be updated as the project progresses and patterns emerge)*

### General Extension Patterns
-   **Context Menu for Magnet Links:** Standard `targetUrlPatterns: ["magnet:*"]` was problematic for visibility. Workaround: use `contexts: ["link"]` without `targetUrlPatterns` for the magnet menu item, and then check `info.linkUrl.startsWith("magnet:")` in the `onClicked` listener. This ensures the menu item appears for all links, but only processes actual magnet links. (Retained from previous version)
-   **Icon Loading:** If `manifest.json` references icon files that don't exist or are invalid, the extension may fail to load. Removing icon references allows loading with a default icon. (Retained from previous version)
-   **Phased Development for New Features:** Adopted a phased approach for implementing significant new functionality (original multi-server, and now multi-client transformation) to maintain stability. (Retained and still relevant)
-   **ES Modules for Service Worker:** Using `"type": "module"` for `background.js` in `manifest.json` allows for better code organization with imports/exports, crucial for the API handler architecture.

### Multi-Client Architecture & API Handling
-   **API Handler Abstraction:**
    -   Client-specific API logic is encapsulated in separate modules within the `api_handlers/` directory (e.g., `qbittorrent_handler.js`, `transmission_handler.js`, `deluge_handler.js`).
    -   `api_handlers/api_client_factory.js` is used to dynamically retrieve the correct handler based on the `clientType` string stored in server configurations.
    -   Each handler module should export a consistent interface, minimally `addTorrent(torrentUrl, serverConfig, torrentOptions)` and `testConnection(serverConfig)`.
-   **`clientType` Field:** A `clientType` string (e.g., "qbittorrent", "transmission", "deluge") is now a mandatory part of each server configuration object stored in `chrome.storage.local`. This dictates which API handler is used.
-   **Parameter Mapping:**
    -   Generic torrent options (like tags, category, paused state, download directory) defined in the extension need to be mapped to client-specific API parameters within each handler.
    -   Example: qBittorrent uses `tags` and `category` separately. Transmission and Deluge (via Label plugin, typically) might use a combined `labels` array. Handlers must adapt.
-   **Authentication & Session Management:**
    -   Each client handler is responsible for its specific authentication mechanism (e.g., qBittorrent's cookie after form login, Transmission's Basic Auth + X-Transmission-Session-Id, Deluge's session cookie after JSON-RPC login).
    -   Managing state like session IDs (Transmission) or cookies (Deluge) across `fetch` calls within a service worker requires careful implementation (e.g., module-level variables for session IDs, reliance on browser cookie store for Deluge if `credentials: 'include'` works as expected or if cookies are accessible).
-   **Error Handling:** Client handlers should attempt to return a standardized `{ success: boolean, error?: string, data?: any, duplicate?: boolean }` object to `background.js` for consistent notification and status updates.
-   **Data Storage (`servers` array):**
    -   Server objects now use generic field names: `url` (formerly `qbUrl`), `username` (formerly `qbUsername`), `password` (formerly `qbPassword`), alongside the new `clientType`.
    -   Migration logic in `options.js` (during `loadSettings`) handles defaulting `clientType` to "qbittorrent" and mapping old field names for existing stored configurations to ensure backward compatibility.
-   **Placeholder Handlers:** For clients with uncertain or complex/proprietary APIs (e.g., rTorrent's XML-RPC, Buffalo, Vuze, tTorrent), initial placeholder handlers have been created. These will require significant further investigation and development to become fully functional. The XML-RPC nature of rTorrent, for instance, will likely require a dedicated parsing/building strategy beyond simple `fetch` with JSON.

### UI & Configuration
-   **Options Page (`options.js`):**
    -   The server configuration form now includes a "Client Type" dropdown.
    -   Logic in `options.js` must handle saving/loading this `clientType` and passing it correctly during "Test Connection".
    -   Future: May need dynamic adjustment of form fields based on selected `clientType` if clients have vastly different essential config parameters.
-   **Popup Page (`popup.js`):** Displays the `clientType` of the active server.

### URL-Based Server Selection
-   (Logic retained from previous version, but now the determined `targetServer` object will include `clientType`, which is then used by `addTorrentToClient` to get the correct API handler.)
    -   Optional feature, enabled by a global toggle.
    -   Store URL-to-Server mappings (website pattern -> server ID) as an array of objects in `chrome.storage.local`.
    -   `background.js` logic: on context menu click, if feature enabled, match current page URL (`info.pageUrl`) against patterns (domain/prefix matching, respecting user order for priority).
    -   If rule matches, use mapped server; otherwise, fall back to manually selected `activeServerId`.

## Initial Thoughts/Placeholders for Further Development:

-   **Manifest V3 Nuances:** Continue to pay close attention to service worker lifecycle, permissions, and API changes specific to V3, especially concerning `fetch` and cookie/session management across different client APIs.
-   **Torrent Client API Variations:** As more clients are added, document common request/response patterns, unique authentication quirks, and error codes for each.
-   **User Configuration for Diverse Clients:** Note common issues users might face with server URLs, ports, paths (e.g., Transmission's `/transmission/rpc`, rTorrent's SCGI path), and authentication for each client type.
-   **URL Pattern Matching Robustness:** (Retained) For URL-based server selection, the domain/prefix matching logic will need careful implementation and testing to handle various URL structures correctly.
-   **Dynamic Form Fields in Options:** Plan for how `options.html`/`.js` will adapt to show/hide specific input fields based on `clientType` if future clients require unique parameters not covered by the current generic set (e.g., SCGI path for rTorrent, specific token fields).
